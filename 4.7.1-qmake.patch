--- origsrc/qt-everywhere-opensource-src-4.7.1/projects.pro	2010-12-26 23:47:35.460230200 -0600
+++ src/qt-everywhere-opensource-src-4.7.1/projects.pro	2010-12-25 21:47:53.558331100 -0600
@@ -150,7 +150,7 @@
 
 #qmake
 qmake.path=$$[QT_INSTALL_BINS]
-win32 {
+win32|cygwin-g++ {
    qmake.files=$$QT_BUILD_TREE/bin/qmake.exe
 } else {
    qmake.files=$$QT_BUILD_TREE/bin/qmake
--- origsrc/qt-everywhere-opensource-src-4.7.1/qmake/generators/makefile.cpp	2010-12-25 21:26:02.821646800 -0600
+++ src/qt-everywhere-opensource-src-4.7.1/qmake/generators/makefile.cpp	2010-12-26 22:50:54.751505200 -0600
@@ -1087,6 +1087,11 @@
         int dot = ret.indexOf('.');
         if(dot != -1)
             ret.truncate(dot);
+        if(ret.startsWith("cyg"))
+            ret = "lib" + ret.mid(3);
+        int dash = ret.indexOf('-');
+        if(dash != -1)
+            ret.truncate(dash);
         ret += Option::prl_ext;
     }
     if(!project->isEmpty("QMAKE_BUNDLE"))
--- origsrc/qt-everywhere-opensource-src-4.7.1/qmake/generators/unix/unixmake.cpp	2010-12-26 23:47:35.507030300 -0600
+++ src/qt-everywhere-opensource-src-4.7.1/qmake/generators/unix/unixmake.cpp	2010-12-25 21:47:53.558331100 -0600
@@ -695,16 +695,16 @@
         bundle = true;
     } else if(project->first("TEMPLATE") == "app") {
         target = "$(QMAKE_TARGET)";
+        if(!project->isEmpty("QMAKE_CYGWIN_EXE") && !target.endsWith(".exe"))
+            target += ".exe";
     } else if(project->first("TEMPLATE") == "lib") {
-        if(project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
             if(!project->isActiveConfig("staticlib") && !project->isActiveConfig("plugin")) {
-                if(project->isEmpty("QMAKE_HPUX_SHLIB")) {
+                if(project->isEmpty("QMAKE_HPUX_SHLIB") && project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
                     links << "$(TARGET0)" << "$(TARGET1)" << "$(TARGET2)";
                 } else {
                     links << "$(TARGET0)";
                 }
             }
-        }
     }
     for(int i = 0; i < targets.size(); ++i) {
         QString src = targets.at(i),
@@ -792,7 +792,10 @@
                     if(lslash != -1)
                         link = link.right(link.length() - (lslash + 1));
                     QString dst_link = filePrefixRoot(root, fileFixify(targetdir + link, FileFixifyAbsolute));
-                    ret += "\n\t-$(SYMLINK) \"$(TARGET)\" \"" + dst_link + "\"";
+                    if(!project->isEmpty("QMAKE_CYGWIN_SHLIB"))
+                        ret += "\n\t-$(INSTALL_FILE) \"" + destdir + "$(TARGET0)\" \"" + dst_link + "\"";
+                    else
+                        ret += "\n\t-$(SYMLINK) \"$(TARGET)\" \"" + dst_link + "\"";
                     if(!uninst.isEmpty())
                         uninst.append("\n\t");
                     uninst.append("-$(DEL_FILE) \"" + dst_link + "\"");
--- origsrc/qt-everywhere-opensource-src-4.7.1/qmake/generators/unix/unixmake2.cpp	2010-12-26 23:47:35.522630400 -0600
+++ src/qt-everywhere-opensource-src-4.7.1/qmake/generators/unix/unixmake2.cpp	2010-12-26 22:49:54.972201000 -0600
@@ -565,6 +565,14 @@
             if(!project->isEmpty("QMAKE_POST_LINK"))
                 t << "\n\t" << var("QMAKE_POST_LINK");
             t << endl << endl;
+        } else if(!project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+            t << "\n\t"
+              << "-$(DEL_FILE) $(TARGET) $(TARGET0)" << "\n\t"
+              << var("QMAKE_LINK_SHLIB_CMD") << "\n\t";
+            if(!destdir.isEmpty())
+              t  << "-$(DEL_FILE) " << destdir << "$(TARGET)\n\t"
+                 << "-$(DEL_FILE) " << destdir << "$(TARGET0)\n\t"
+                 << "-$(MOVE) $(TARGET) $(TARGET0) " << destdir;
         } else if(project->isEmpty("QMAKE_HPUX_SHLIB")) {
             t << "\n\t"
               << "-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)" << "\n\t"
@@ -1011,8 +1019,8 @@
         }
         if(!project->isEmpty("TARGET"))
             project->values("TARGET").first().prepend(project->first("DESTDIR"));
-       if (!project->values("QMAKE_CYGWIN_EXE").isEmpty())
-            project->values("TARGET_EXT").append(".exe");
+        if(!project->isEmpty("QMAKE_CYGWIN_EXE"))
+            project->values("TARGET").first() += ".exe";
     } else if (project->isActiveConfig("staticlib")) {
         project->values("TARGET").first().prepend(project->first("QMAKE_PREFIX_STATICLIB"));
         project->values("TARGET").first() += "." + project->first("QMAKE_EXTENSION_STATICLIB");
@@ -1044,8 +1052,9 @@
                                                       bundle_loc + unescapeFilePath(project->first("TARGET")));
         } else if(project->isActiveConfig("plugin")) {
             QString prefix;
-            if(!project->isActiveConfig("no_plugin_name_prefix"))
-                prefix = "lib";
+            if(!project->isActiveConfig("no_plugin_name_prefix")) {
+                prefix = project->first("QMAKE_PREFIX_SHLIB");
+            }
             project->values("TARGET_x.y.z").append(prefix +
                                                         project->first("TARGET") + "." +
                                                         project->first("QMAKE_EXTENSION_PLUGIN"));
@@ -1058,6 +1067,11 @@
                                                         project->first("QMAKE_EXTENSION_PLUGIN") +
                                                         "." + project->first("VER_MAJ"));
             project->values("TARGET") = project->values("TARGET_x.y.z");
+        } else if (!project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+            project->values("TARGET_").append("lib" + project->first("TARGET") + ".dll.a");
+            project->values("TARGET_x").append("cyg" + project->first("TARGET") + "-" +
+                                                    project->first("VER_MAJ") + "." + project->first("QMAKE_EXTENSION_SHLIB"));
+            project->values("TARGET") = project->values("TARGET_x");
         } else if (!project->isEmpty("QMAKE_HPUX_SHLIB")) {
             project->values("TARGET_").append("lib" + project->first("TARGET") + ".sl");
             if(project->isActiveConfig("lib_version_first"))
@@ -1181,6 +1195,8 @@
                 project->values("QMAKE_LFLAGS") += project->values("QMAKE_LFLAGS_SONAME");
         } else {
             project->values("QMAKE_LFLAGS") += project->values("QMAKE_LFLAGS_SHLIB");
+            if(!project->isEmpty("QMAKE_CYGWIN_SHLIB"))
+                project->values("QMAKE_LFLAGS") += QString("-Wl,--out-implib,$(TARGET0)");
             if(!project->isEmpty("QMAKE_LFLAGS_COMPAT_VERSION")) {
                 if(project->isEmpty("COMPAT_VERSION"))
                     project->values("QMAKE_LFLAGS") += QString(project->first("QMAKE_LFLAGS_COMPAT_VERSION") +
@@ -1249,6 +1265,11 @@
     int dot = ret.indexOf('.');
     if(dot != -1)
         ret = ret.left(dot);
+    if(ret.startsWith("cyg"))
+        ret = "lib" + ret.mid(3);
+    int dash = ret.indexOf('-');
+    if(dash != -1)
+        ret = ret.left(dash);
     ret += Option::libtool_ext;
     if(!project->isEmpty("QMAKE_LIBTOOL_DESTDIR"))
         ret.prepend(project->first("QMAKE_LIBTOOL_DESTDIR") + Option::dir_sep);
@@ -1288,9 +1311,14 @@
     if(project->isActiveConfig("plugin")) {
         t << var("TARGET");
     } else {
-        if (project->isEmpty("QMAKE_HPUX_SHLIB"))
+        if (!project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+            t << var("TARGET_");
+        } else {
+        if (project->isEmpty("QMAKE_HPUX_SHLIB")) {
             t << var("TARGET_x.y.z") << " ";
+        }
         t << var("TARGET_x") << " " << var("TARGET_");
+        }
     }
     t << "'\n\n";
 
@@ -1339,11 +1367,14 @@
     int slsh = ret.lastIndexOf(Option::dir_sep);
     if(slsh != -1)
         ret = ret.right(ret.length() - slsh - 1);
-    if(ret.startsWith("lib"))
+    if(ret.startsWith("lib") || ret.startsWith("cyg"))
         ret = ret.mid(3);
     int dot = ret.indexOf('.');
     if(dot != -1)
         ret = ret.left(dot);
+    int dash = ret.indexOf('-');
+    if(dash != -1)
+        ret = ret.left(dash);
     ret += Option::pkgcfg_ext;
     if(!project->isEmpty("QMAKE_PKGCONFIG_DESTDIR"))
         ret.prepend(project->first("QMAKE_PKGCONFIG_DESTDIR") + Option::dir_sep);
