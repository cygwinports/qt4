--- origsrc/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/bindings/c/c_instance.cpp	2008-04-28 08:11:16.000000000 -0500
+++ src/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/bindings/c/c_instance.cpp	2008-07-13 19:21:03.750000000 -0500
@@ -183,7 +183,7 @@
         !_object->_class->enumerate)
         return;
 
-    unsigned count;
+    uint32_t count;
     NPIdentifier* identifiers;
     
     {
--- origsrc/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/kjs/DateMath.h	2008-04-28 08:11:16.000000000 -0500
+++ src/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/kjs/DateMath.h	2008-07-13 14:20:03.859375000 -0500
@@ -101,7 +101,7 @@
         , year(inTm.tm_year)
         , isDST(inTm.tm_isdst)
     {
-#if !PLATFORM(WIN_OS) && !PLATFORM(SOLARIS_OS) && !PLATFORM(HPUX_OS)
+#if !PLATFORM(WIN_OS) && !PLATFORM(SOLARIS_OS) && !PLATFORM(HPUX_OS) && !PLATFORM(CYGWIN)
         utcOffset = static_cast<int>(inTm.tm_gmtoff);
 
         int inZoneSize = strlen(inTm.tm_zone) + 1;
@@ -128,7 +128,7 @@
         ret.tm_year  =  year;
         ret.tm_isdst =  isDST;
 
-#if !PLATFORM(WIN_OS) && !PLATFORM(SOLARIS_OS) && !PLATFORM(HPUX_OS)
+#if !PLATFORM(WIN_OS) && !PLATFORM(SOLARIS_OS) && !PLATFORM(HPUX_OS) && !PLATFORM(CYGWIN)
         ret.tm_gmtoff = static_cast<long>(utcOffset);
         ret.tm_zone = timeZone;
 #endif
--- origsrc/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/kjs/collector.cpp	2008-04-28 08:11:16.000000000 -0500
+++ src/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/kjs/collector.cpp	2008-07-13 14:21:31.250000000 -0500
@@ -46,7 +46,7 @@
 
 #include "CollectorHeapIntrospector.h"
 
-#elif PLATFORM(WIN_OS)
+#elif PLATFORM(WIN_OS) || PLATFORM(CYGWIN)
 
 #include <windows.h>
 
@@ -126,7 +126,7 @@
 #if PLATFORM(DARWIN)    
     vm_address_t address = 0;
     vm_map(current_task(), &address, BLOCK_SIZE, BLOCK_OFFSET_MASK, VM_FLAGS_ANYWHERE, MEMORY_OBJECT_NULL, 0, FALSE, VM_PROT_DEFAULT, VM_PROT_DEFAULT, VM_INHERIT_DEFAULT);
-#elif PLATFORM(WIN_OS)
+#elif PLATFORM(WIN_OS) || PLATFORM(CYGWIN)
      // windows virtual address granularity is naturally 64k
     LPVOID address = VirtualAlloc(NULL, BLOCK_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
 #elif HAVE(POSIX_MEMALIGN)
@@ -164,7 +164,7 @@
 {
 #if PLATFORM(DARWIN)    
     vm_deallocate(current_task(), reinterpret_cast<vm_address_t>(block), BLOCK_SIZE);
-#elif PLATFORM(WIN_OS)
+#elif PLATFORM(WIN_OS) || PLATFORM(CYGWIN)
     VirtualFree(block, BLOCK_SIZE, MEM_RELEASE);
 #elif HAVE(POSIX_MEMALIGN)
     free(block);
@@ -291,7 +291,7 @@
 #elif PLATFORM(WIN_OS) && PLATFORM(X86_64) && COMPILER(MSVC)
     PNT_TIB64 pTib = reinterpret_cast<PNT_TIB64>(NtCurrentTeb());
     return (void*)pTib->StackBase;
-#elif PLATFORM(WIN_OS) && PLATFORM(X86) && COMPILER(GCC)
+#elif (PLATFORM(WIN_OS) || PLATFORM(CYGWIN)) && PLATFORM(X86) && COMPILER(GCC)
     // offset 0x18 from the FS segment register gives a pointer to
     // the thread information block for the current thread
     NT_TIB* pTib;
--- origsrc/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/kjs/value.cpp	2008-04-28 08:11:16.000000000 -0500
+++ src/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/kjs/value.cpp	2008-07-13 19:58:00.703125000 -0500
@@ -41,7 +41,7 @@
     return Collector::allocate(size);
 }
 
-bool JSCell::getUInt32(unsigned&) const
+bool JSCell::getUInt32(uint32_t&) const
 {
     return false;
 }
--- origsrc/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/wtf/Platform.h	2008-04-28 08:11:16.000000000 -0500
+++ src/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/wtf/Platform.h	2008-07-13 14:23:29.171875000 -0500
@@ -50,6 +50,13 @@
 #define WTF_PLATFORM_WIN_OS 1
 #endif
 
+/* PLATFORM(CYGWIN) */
+/* Operating system level dependencies for Cygwin that should be used */
+/* regardless of operating environment */
+#if defined(__CYGWIN__)
+#define WTF_PLATFORM_CYGWIN 1
+#endif
+
 /* PLATFORM(SOLARIS_OS) */
 /* Operating system level dependencies for Solaris that should be used */
 /* regardless of operating environment */
@@ -70,6 +77,7 @@
    || defined(__unix)      \
    || defined(__unix__)    \
    || defined (__NetBSD__) \
+   || defined(__CYGWIN__)  \
    || defined(_AIX)
 #define WTF_PLATFORM_UNIX 1
 #endif
--- origsrc/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/wtf/unicode/qt4/UnicodeQt4.h	2008-04-28 08:11:16.000000000 -0500
+++ src/qt-x11-opensource-src-4.4.0/src/3rdparty/webkit/JavaScriptCore/wtf/unicode/qt4/UnicodeQt4.h	2008-07-13 19:55:19.281250000 -0500
@@ -181,7 +181,7 @@
 
     inline UChar32 toLower(UChar32 ch)
     {
-      return QChar::toLower(ch);
+      return QChar::toLower(uint(ch));
     }
 
     inline int toLower(UChar* result, int resultLength, const UChar* src, int srcLength,  bool* error)
@@ -234,7 +234,7 @@
 
     inline UChar32 toUpper(UChar32 ch)
     {
-      return QChar::toUpper(ch);
+      return QChar::toUpper(uint(ch));
     }
 
     inline int toUpper(UChar* result, int resultLength, const UChar* src, int srcLength,  bool* error)
@@ -287,12 +287,12 @@
 
     inline int toTitleCase(UChar32 c)
     {
-      return QChar::toTitleCase(c);
+      return QChar::toTitleCase(uint(c));
     }
 
     inline UChar32 foldCase(UChar32 c)
     {
-      return QChar::toCaseFolded(c);
+      return QChar::toCaseFolded(uint(c));
     }
 
     inline int foldCase(UChar* result, int resultLength, UChar* src, int srcLength,  bool* error)
@@ -310,19 +310,19 @@
 
     inline bool isFormatChar(UChar32 c)
     {
-      return QChar::category(c) == QChar::Other_Format;
+      return QChar::category(uint(c)) == QChar::Other_Format;
     }
 
     inline bool isPrintableChar(UChar32 c)
     {
       const uint test = U_MASK(QChar::Other_Control) |
                         U_MASK(QChar::Other_NotAssigned);
-      return !(U_MASK(QChar::category(c)) & test);
+      return !(U_MASK(QChar::category(uint(c))) & test);
     }
 
     inline bool isSeparatorSpace(UChar32 c)
     {
-      return QChar::category(c) == QChar::Separator_Space;
+      return QChar::category(uint(c)) == QChar::Separator_Space;
     }
 
     inline bool isPunct(UChar32 c)
@@ -334,37 +334,37 @@
                         U_MASK(QChar::Punctuation_InitialQuote) |
                         U_MASK(QChar::Punctuation_FinalQuote) |
                         U_MASK(QChar::Punctuation_Other);
-      return U_MASK(QChar::category(c)) & test;
+      return U_MASK(QChar::category(uint(c))) & test;
     }
 
     inline bool isDigit(UChar32 c)
     {
-      return QChar::category(c) == QChar::Number_DecimalDigit;
+      return QChar::category(uint(c)) == QChar::Number_DecimalDigit;
     }
 
     inline bool isLower(UChar32 c)
     {
-      return QChar::category(c) == QChar::Letter_Lowercase;
+      return QChar::category(uint(c)) == QChar::Letter_Lowercase;
     }
 
     inline bool isUpper(UChar32 c)
     {
-      return QChar::category(c) == QChar::Letter_Uppercase;
+      return QChar::category(uint(c)) == QChar::Letter_Uppercase;
     }
 
     inline int digitValue(UChar32 c)
     {
-      return QChar::digitValue(c);
+      return QChar::digitValue(uint(c));
     }
 
     inline UChar32 mirroredChar(UChar32 c)
     {
-      return QChar::mirroredChar(c);
+      return QChar::mirroredChar(uint(c));
     }
 
     inline uint8_t combiningClass(UChar32 c)
     {
-      return QChar::combiningClass(c);
+      return QChar::combiningClass(uint(c));
     }
 
     inline DecompositionType decompositionType(UChar32 c)
@@ -386,12 +386,12 @@
 
     inline Direction direction(UChar32 c)
     {
-      return (Direction)QChar::direction(c);
+      return (Direction)QChar::direction(uint(c));
     }
 
     inline CharCategory category(UChar32 c)
     {
-      return (CharCategory) U_MASK(QChar::category(c));
+      return (CharCategory) U_MASK(QChar::category(uint(c)));
     }
 
 #else
